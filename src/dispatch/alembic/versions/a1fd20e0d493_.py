"""empty message

Revision ID: a1fd20e0d493
Revises: 
Create Date: 2021-07-31 05:44:03.115769

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import sqlalchemy_utils

# revision identifiers, used by Alembic.
revision = 'a1fd20e0d493'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('dispatch_user',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('email', sa.String(), nullable=True),
                    sa.Column('password', sa.Binary(), nullable=False),
                    sa.Column('role', sa.String(), nullable=False),
                    sa.Column('is_org_owner', sa.Boolean(), nullable=True),
                    sa.Column('org_id', sa.Integer(), nullable=False),
                    sa.Column('org_code', sa.String(), nullable=False),
                    sa.Column('is_team_owner', sa.Boolean(), nullable=True),
                    sa.Column('default_team_id', sa.Integer(), nullable=True),
                    sa.Column('thumbnail_photo_url', sa.String(), nullable=True),
                    sa.Column('full_name', sa.String(), nullable=True),
                    sa.Column('is_team_worker', sa.Boolean(), nullable=True),
                    sa.Column('created_at', sa.DateTime(), nullable=True),
                    sa.Column('updated_at', sa.DateTime(), nullable=True),
                    sa.Column('updated_by', sa.String(), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('email')
                    )
    op.create_table('location',
                    sa.Column('id', sa.BigInteger(), nullable=False),
                    sa.Column('location_code', sa.String(), nullable=True),
                    sa.Column('geo_longitude', sa.Float(), nullable=False),
                    sa.Column('geo_latitude', sa.Float(), nullable=False),
                    sa.Column('geo_address_text', sa.String(), nullable=True),
                    sa.Column('geo_json', sa.JSON(), nullable=True),
                    sa.Column('job_history_feature_data', sa.JSON(), nullable=True),
                    sa.Column('job_count', sa.Integer(), nullable=True),
                    sa.Column('avg_actual_start_minutes', sa.Float(), nullable=True),
                    sa.Column('avg_actual_duration_minutes', sa.Float(), nullable=True),
                    sa.Column('avg_days_delay', sa.Float(), nullable=True),
                    sa.Column('stddev_days_delay', sa.Float(), nullable=True),
                    sa.Column('search_vector',
                              sqlalchemy_utils.types.ts_vector.TSVectorType(), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('location_code')
                    )
    op.create_index('ix_location_search_vector', 'location', [
                    'search_vector'], unique=False, postgresql_using='gin')
    op.create_table('plugin',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('title', sa.String(), nullable=True),
                    sa.Column('slug', sa.String(), nullable=True),
                    sa.Column('description', sa.String(), nullable=True),
                    sa.Column('version', sa.String(), nullable=True),
                    sa.Column('author', sa.String(), nullable=True),
                    sa.Column('author_url', sa.String(), nullable=True),
                    sa.Column('type', sa.String(), nullable=True),
                    sa.Column('enabled', sa.Boolean(), nullable=True),
                    sa.Column('required', sa.Boolean(), nullable=True),
                    sa.Column('multiple', sa.Boolean(), nullable=True),
                    sa.Column('config', sa.JSON(), nullable=True),
                    sa.Column('config_form_spec', sa.JSON(), nullable=True),
                    sa.Column('search_vector',
                              sqlalchemy_utils.types.ts_vector.TSVectorType(), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('slug')
                    )
    op.create_index('ix_plugin_search_vector', 'plugin', [
                    'search_vector'], unique=False, postgresql_using='gin')
    op.create_table('service',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('service_type', sa.String(), nullable=True),
                    sa.Column('is_active', sa.Boolean(), nullable=True),
                    sa.Column('code', sa.String(), nullable=True),
                    sa.Column('name', sa.String(), nullable=True),
                    sa.Column('description', sa.String(), nullable=True),
                    sa.Column('search_vector',
                              sqlalchemy_utils.types.ts_vector.TSVectorType(), nullable=True),
                    sa.Column('created_at', sa.DateTime(), nullable=True),
                    sa.Column('updated_at', sa.DateTime(), nullable=True),
                    sa.Column('updated_by', sa.String(), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('code')
                    )
    op.create_index('ix_service_search_vector', 'service', [
                    'search_vector'], unique=False, postgresql_using='gin')
    op.create_table('tag',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('name', sa.String(), nullable=True),
                    sa.Column('description', sa.String(), nullable=True),
                    sa.Column('uri', sa.String(), nullable=True),
                    sa.Column('source', sa.String(), nullable=True),
                    sa.Column('type', sa.String(), nullable=True),
                    sa.Column('discoverable', sa.Boolean(), nullable=True),
                    sa.Column('search_vector',
                              sqlalchemy_utils.types.ts_vector.TSVectorType(), nullable=True),
                    sa.Column('created_at', sa.DateTime(), nullable=True),
                    sa.Column('updated_at', sa.DateTime(), nullable=True),
                    sa.Column('updated_by', sa.String(), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('name')
                    )
    op.create_index('ix_tag_search_vector', 'tag', [
                    'search_vector'], unique=False, postgresql_using='gin')
    op.create_table('service_plugin',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('planning_plugin_type', sa.String(), nullable=False),
                    sa.Column('service_id', sa.Integer(), nullable=True),
                    sa.Column('plugin_id', sa.Integer(), nullable=True),
                    sa.Column('config', sa.JSON(), nullable=True),
                    sa.ForeignKeyConstraint(['plugin_id'], ['plugin.id'], ),
                    sa.ForeignKeyConstraint(['service_id'], ['service.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('team',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('code', sa.String(), nullable=False),
                    sa.Column('org_id', sa.Integer(), nullable=False),
                    sa.Column('name', sa.String(), nullable=True),
                    sa.Column('description', sa.String(), nullable=True),
                    sa.Column('service_id', sa.Integer(), nullable=True),
                    sa.Column('flex_form_data', sa.JSON(), nullable=True),
                    sa.Column('latest_env_kafka_offset', sa.Integer(), nullable=True),
                    sa.Column('latest_env_db_sink_offset', sa.Integer(), nullable=True),
                    sa.Column('search_vector',
                              sqlalchemy_utils.types.ts_vector.TSVectorType(), nullable=True),
                    sa.Column('created_at', sa.DateTime(), nullable=True),
                    sa.Column('updated_at', sa.DateTime(), nullable=True),
                    sa.Column('updated_by', sa.String(), nullable=True),
                    sa.ForeignKeyConstraint(['service_id'], ['service.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index('ix_team_search_vector', 'team', [
                    'search_vector'], unique=False, postgresql_using='gin')
    op.create_table('worker',
                    sa.Column('id', sa.BigInteger(), nullable=False),
                    sa.Column('code', sa.String(), nullable=True),
                    sa.Column('name', sa.String(), nullable=True),
                    sa.Column('description', sa.String(), nullable=True),
                    sa.Column('is_active', sa.Boolean(), nullable=True),
                    sa.Column('team_id', sa.Integer(), nullable=True),
                    sa.Column('location_id', sa.BigInteger(), nullable=True),
                    sa.Column('flex_form_data', sa.JSON(), nullable=True),
                    sa.Column('job_history_feature_data', sa.JSON(), nullable=True),
                    sa.Column('business_hour', sa.JSON(), nullable=True),
                    sa.Column('auth_username', sa.String(), nullable=True),
                    sa.Column('search_vector',
                              sqlalchemy_utils.types.ts_vector.TSVectorType(), nullable=True),
                    sa.Column('created_at', sa.DateTime(), nullable=True),
                    sa.Column('updated_at', sa.DateTime(), nullable=True),
                    sa.Column('updated_by', sa.String(), nullable=True),
                    sa.ForeignKeyConstraint(['location_id'], ['location.id'], ),
                    sa.ForeignKeyConstraint(['team_id'], ['team.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index('ix_worker_search_vector', 'worker', [
                    'search_vector'], unique=False, postgresql_using='gin')
    op.create_table('job',
                    sa.Column('id', sa.BigInteger(), nullable=False),
                    sa.Column('code', sa.String(), nullable=False),
                    sa.Column('job_type', sa.String(), nullable=False),
                    sa.Column('name', sa.String(), nullable=True),
                    sa.Column('description', sa.String(), nullable=True),
                    sa.Column('planning_status', sa.String(), nullable=False),
                    sa.Column('auto_planning', sa.Boolean(), nullable=True),
                    sa.Column('is_active', sa.Boolean(), nullable=True),
                    sa.Column('team_id', sa.Integer(), nullable=False),
                    sa.Column('flex_form_data', sa.JSON(), nullable=True),
                    sa.Column('requested_start_datetime', sa.DateTime(), nullable=True),
                    sa.Column('requested_duration_minutes', sa.Float(), nullable=True),
                    sa.Column('requested_primary_worker_id', sa.BigInteger(), nullable=True),
                    sa.Column('scheduled_start_datetime', sa.DateTime(), nullable=True),
                    sa.Column('scheduled_duration_minutes', sa.Float(), nullable=True),
                    sa.Column('scheduled_primary_worker_id', sa.BigInteger(), nullable=True),
                    sa.Column('location_id', sa.BigInteger(), nullable=True),
                    sa.Column('search_vector',
                              sqlalchemy_utils.types.ts_vector.TSVectorType(), nullable=True),
                    sa.Column('created_at', sa.DateTime(), nullable=True),
                    sa.Column('updated_at', sa.DateTime(), nullable=True),
                    sa.Column('updated_by', sa.String(), nullable=True),
                    sa.ForeignKeyConstraint(['location_id'], ['location.id'], ),
                    sa.ForeignKeyConstraint(['requested_primary_worker_id'], ['worker.id'], ),
                    sa.ForeignKeyConstraint(['scheduled_primary_worker_id'], ['worker.id'], ),
                    sa.ForeignKeyConstraint(['team_id'], ['team.id'], ),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('code')
                    )
    op.create_index('ix_job_search_vector', 'job', [
                    'search_vector'], unique=False, postgresql_using='gin')
    op.create_table('assoc_job_tags',
                    sa.Column('job_id', sa.BigInteger(), nullable=False),
                    sa.Column('tag_id', sa.Integer(), nullable=False),
                    sa.ForeignKeyConstraint(['job_id'], ['job.id'], ),
                    sa.ForeignKeyConstraint(['tag_id'], ['tag.id'], ),
                    sa.PrimaryKeyConstraint('job_id', 'tag_id')
                    )
    op.create_table('event',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
                    sa.Column('started_at', sa.DateTime(), nullable=False),
                    sa.Column('ended_at', sa.DateTime(), nullable=False),
                    sa.Column('source', sa.String(), nullable=False),
                    sa.Column('description', sa.String(), nullable=False),
                    sa.Column('details', sqlalchemy_utils.types.json.JSONType(), nullable=True),
                    sa.Column('worker_id', sa.Integer(), nullable=True),
                    sa.Column('job_id', sa.Integer(), nullable=True),
                    sa.Column('search_vector',
                              sqlalchemy_utils.types.ts_vector.TSVectorType(), nullable=True),
                    sa.Column('created_at', sa.DateTime(), nullable=True),
                    sa.Column('updated_at', sa.DateTime(), nullable=True),
                    sa.Column('updated_by', sa.String(), nullable=True),
                    sa.ForeignKeyConstraint(['job_id'], ['job.id'], ),
                    sa.ForeignKeyConstraint(['worker_id'], ['worker.id'], ),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('uuid')
                    )
    op.create_index('ix_event_search_vector', 'event', [
                    'search_vector'], unique=False, postgresql_using='gin')
    op.create_table('job_scheduled_secondary_workers',
                    sa.Column('job_id', sa.BigInteger(), nullable=False),
                    sa.Column('worker_id', sa.Integer(), nullable=False),
                    sa.ForeignKeyConstraint(['job_id'], ['job.id'], ),
                    sa.ForeignKeyConstraint(['worker_id'], ['worker.id'], ),
                    sa.PrimaryKeyConstraint('job_id', 'worker_id')
                    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('job_scheduled_secondary_workers')
    op.drop_index('ix_event_search_vector', table_name='event')
    op.drop_table('event')
    op.drop_table('assoc_job_tags')
    op.drop_index('ix_job_search_vector', table_name='job')
    op.drop_table('job')
    op.drop_index('ix_worker_search_vector', table_name='worker')
    op.drop_table('worker')
    op.drop_index('ix_team_search_vector', table_name='team')
    op.drop_table('team')
    op.drop_table('service_plugin')
    op.drop_index('ix_tag_search_vector', table_name='tag')
    op.drop_table('tag')
    op.drop_index('ix_service_search_vector', table_name='service')
    op.drop_table('service')
    op.drop_index('ix_plugin_search_vector', table_name='plugin')
    op.drop_table('plugin')
    op.drop_index('ix_location_search_vector', table_name='location')
    op.drop_table('location')
    op.drop_table('dispatch_user')
    # ### end Alembic commands ###
